apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-logging-config
  # namespace: kube-public
  labels:
    app: elasticsearch-logging
data:
  limits.conf: |-
    elasticsearch soft memlock unlimited
    elasticsearch hard memlock unlimited
    elasticsearch hard nofile 65536
    elasticsearch soft nofile 65536
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-logging
  # namespace: kube-public
  labels:
    app: elasticsearch-logging
  annotations:
    security.kubernetes.io/sysctls: vm.swappiness=0
    security.kubernetes.io/sysctls: vm.max_map_count=262144
    security.kubernetes.io/sysctls: vm.overcommit_memory=1
spec:
  serviceName: elasticsearch-logging
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch-logging
  template:
    metadata:
      labels:
        app: elasticsearch-logging
    spec:
      # serviceAccountName: elasticsearch-logging
      # securityContext:
        # privileged: true
        # runAsUser: 0
        # fsGroup: 0
      # initContainers:
      # - name: elasticsearch-logging-init
      #   image: alpine:latest
      #   imagePullPolicy: IfNotPresent
      #   command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
      #   securityContext:
      #     privileged: true
      # - name: elasticsearch-logging-ulimit
      #   image: alpine:latest
      # #   # image: busybox:latest
      #   imagePullPolicy: IfNotPresent
      # #   command: ["/sbin/ulimit", "-l", "unlimited"]
      #   command: ["/sbin/sysctl", "-w", "vm.swappiness=0"]
      #   securityContext:
      #     privileged: true
      containers:
      - name: elasticsearch-logging
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
        # - image: elasticsearch:latest
        # imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            # memory: "1Gi"
          requests:
            cpu: 200m
            # memory: "1Gi"
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: "cluster.name"
          value: "elasticsearch-cluster"
        - name: "bootstrap.memory_lock"
          # value: "true"
          value: "false"
        - name: "discovery.seed_hosts"
          value: "elasticsearch-logging-0,elasticsearch-logging-1,elasticsearch-logging-2"
        - name: "cluster.initial_master_nodes"
          value: "elasticsearch-logging-0"
        - name: "discovery.find_peers_interval"
          value: "5s"
        - name: "http.cors.enabled"
          value: "true"
        - name: "http.cors.allow-origin"
          value: "*"

        - name: "ES_JAVA_OPTS"
          value: "-Xms1g -Xmx1g"
        # - name: MAX_LOCKED_MEMORY
        - name: RLIMIT_MEMLOCK
          value: "unlimited"
        ports:
        - containerPort: 9200
          name: restful
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        # readinessProbe:
        #     httpGet:
        #       scheme: HTTP
        #       path: /_cluster/health?local=true
        #       port: 9200
        #     initialDelaySeconds: 5  
        volumeMounts:
        - name: elasticsearch-config
          mountPath: /etc/security/limits.conf
          subPath: limits.conf
        - name: elasticsearch-data
          mountPath: /data
      volumes:
      - name: elasticsearch-data
        emptyDir: {}
      - name: elasticsearch-config
        configMap:
          name: elasticsearch-logging-config
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging
  # namespace: kube-public
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "Elasticsearch"
spec:
  selector:
    app: elasticsearch-logging
  type: NodePort
  # type: ClusterIP
  # clusterIP: None
  ports:
  - name: restful
    port: 9200
    protocol: TCP
    targetPort: restful
    nodePort: 30092
  - name: transport
    port: 9300
    targetPort: transport
